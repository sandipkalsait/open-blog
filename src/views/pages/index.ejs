<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web3 Blog</title>

  <!-- Bootstrap CSS from CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

  <!-- Your custom styles -->
  <!-- <link rel="stylesheet" href="/css/styles.css"> -->

  <!-- Inline CSS for Custom Styling -->
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f7fc;
      margin: 0;
      padding: 0;
    }

    .container {
      margin-top: 50px;
    }

    h2 {
      color: #333;
      text-align: center;
      margin-bottom: 30px;
    }

    form input, form textarea {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 5px;
      border: 1px solid #ccc;
    }

    form textarea {
      height: 150px;
    }

    .btn-primary {
      background-color: #007bff;
      border-color: #007bff;
      width: 100%;
      padding: 12px;
      border-radius: 5px;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #004085;
    }

    .table {
      margin-top: 30px;
      border-collapse: collapse;
      width: 100%;
    }

    .table th, .table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    .table th {
      background-color: #f8f9fa;
    }

    .table tbody tr:hover {
      background-color: #f1f1f1;
    }

    .btn {
      padding: 8px 15px;
      font-size: 14px;
      cursor: pointer;
    }

    .update-btn {
      background-color: #ffc107;
      color: white;
      border: none;
    }

    .update-btn:hover {
      background-color: #e0a800;
    }

    .delete-btn {
      background-color: #dc3545;
      color: white;
      border: none;
    }

    .delete-btn:hover {
      background-color: #c82333;
    }
  </style>
</head>
<body>

  <!-- Include Header Partial -->
  <%- include('partials/header') %>

  <div class="container">
    <h2>Add New Content</h2>
    <form id="add-content-form">
      <input type="text" id="title" placeholder="Content Title" required>
      <textarea id="content" placeholder="Write your content here..." required></textarea>
      <button type="submit" class="btn btn-primary">Add Content</button>
    </form>

    <h2>Content List</h2>
    <table class="table">
      <thead>
        <tr>
          <th>Title</th>
          <th>IPFS Hash</th>
          <th>Author</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="content-list">
        <% if (content && content.length > 0) { %>
          <% content.forEach(function(contentItem, index) { %>
            <tr>
              <td><%= contentItem.title %></td>
              <td><%= contentItem.ipfsHash %></td>
              <td><%= contentItem.author %></td>
              <td>
                <button class="update-btn btn btn-warning" data-index="<%= index %>">Update</button>
                <button class="delete-btn btn btn-danger" data-index="<%= index %>">Delete</button>
              </td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr><td colspan="4">No content available.</td></tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <!-- Include Footer Partial -->
  <%- include('partials/footer') %>

  <!-- Bootstrap JS and your custom JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
  <script >
    document.addEventListener("DOMContentLoaded", () => {
    const addContentForm = document.getElementById("add-content-form");
    const contentList = document.getElementById("content-list");

    addContentForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const title = document.getElementById("title").value;
      const content = document.getElementById("content").value;

      // Upload content to IPFS first
      const ipfsHash = await uploadContentToIPFS(content);

      // Add content to blockchain
      if (ipfsHash) {
        await addContentToBlockchain(title, ipfsHash);
      }
    });

    // Upload content to IPFS
    async function uploadContentToIPFS(content) {
      try {
        const response = await fetch("/api/upload", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ content }),
        });

        const data = await response.json();
        if (data.hash) {
          alert("Content uploaded to IPFS successfully!");
          return data.hash;
        }
      } catch (error) {
        console.error("Error uploading to IPFS:", error);
        alert("Error uploading to IPFS.");
      }
    }

    // Add content to blockchain
    async function addContentToBlockchain(title, ipfsHash) {
      try {
        const response = await fetch("/api/add-content", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ title, ipfsHash }),
        });

        const data = await response.json();
        if (data.message) {
          alert(data.message);
          fetchContent(); // Refresh the list after adding content
        }
      } catch (error) {
        console.error("Error adding content to blockchain:", error);
        alert("Error adding content to blockchain.");
      }
    }

    // Fetch and display content
    async function fetchContent() {
      try {
        const response = await fetch("/api/posts/count");
        const data = await response.json();

        if (data.count) {
          contentList.innerHTML = "";
          for (let i = 0; i < data.count; i++) {
            const contentResponse = await fetch(`/api/content/${i}`);
            const contentData = await contentResponse.json();
            const contentRow = document.createElement("tr");
            contentRow.innerHTML = `
              <td>${contentData.title}</td>
              <td>${contentData.ipfsHash}</td>
              <td>${contentData.author}</td>
              <td>
                <button class="update-btn btn btn-warning" data-index="${i}">Update</button>
                <button class="delete-btn btn btn-danger" data-index="${i}">Delete</button>
              </td>
            `;
            contentList.appendChild(contentRow);
          }

          // Attach update and delete event listeners
          const updateButtons = document.querySelectorAll('.update-btn');
          const deleteButtons = document.querySelectorAll('.delete-btn');

          updateButtons.forEach(button => {
            button.addEventListener('click', handleUpdateContent);
          });

          deleteButtons.forEach(button => {
            button.addEventListener('click', handleDeleteContent);
          });
        }
      } catch (error) {
        console.error("Error fetching content:", error);
      }
    }

    async function handleUpdateContent(e) {
      const index = e.target.getAttribute('data-index');
      const title = prompt("Enter new title:");
      const content = prompt("Enter new content:");

      if (title && content) {
        const ipfsHash = await uploadContentToIPFS(content);
        await updateContentOnBlockchain(index, title, ipfsHash);
      }
    }

    async function handleDeleteContent(e) {
      const index = e.target.getAttribute('data-index');
      const confirmDelete = confirm("Are you sure you want to delete this content?");

      if (confirmDelete) {
        await deleteContentFromBlockchain(index);
      }
    }

    // Update content on blockchain
    async function updateContentOnBlockchain(index, title, ipfsHash) {
      try {
        const response = await fetch(`/api/update-content/${index}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ title, ipfsHash }),
        });

        const data = await response.json();
        if (data.message) {
          alert(data.message);
          fetchContent(); // Refresh the list after updating content
        }
      } catch (error) {
        console.error("Error updating content on blockchain:", error);
        alert("Error updating content.");
      }
    }

    // Delete content from blockchain
    async function deleteContentFromBlockchain(index) {
      try {
        const response = await fetch(`/api/delete-content/${index}`, {
          method: "DELETE",
        });

        const data = await response.json();
        if (data.message) {
          alert(data.message);
          fetchContent(); // Refresh the list after deleting content
        }
      } catch (error) {
        console.error("Error deleting content from blockchain:", error);
        alert("Error deleting content.");
      }
    }

    fetchContent(); // Initial fetch on page load
});

  </script>

</body>
</html>
